{"version":3,"sources":["components/Chart/index.js","components/Card/index.js","components/Timespan/index.js","components/Header/index.js","components/Dashboard/index.js","components/Api/index.js","App.js","serviceWorker.js","index.js"],"names":["Chart","state","pureData","temperatureData","currentSocketValue","componentDidMount","_this","props","endPoint","WebSocket","onmessage","event","JSONParse","JSON","parse","data","undefined","value","setState","apiUrl","fetch","then","results","json","responseData","dataValues","map","console","log","testingTesting","slice","amountOfData","concat","_this2","this","canvas","gradient","getContext","createLinearGradient","yAxisEndPoint","addColorStop","labels","datasets","borderColor","backgroundColor","borderWidth","pointRadius","pointHoverRadius","pointBorderColor","pointBorderWidth","pointBackgroundColor","react_default","a","createElement","className","es","width","height","options","defaultFontSize","legend","display","scales","xAxes","gridLines","color","ticks","yAxes","max","min","Component","Card","fullScreenBool","e","type","style","gridColumnStart","colStart","gridColumnEnd","colEnd","gridRowStart","rowStart","gridRowEnd","rowEnd","title","src","alt","onClick","fullScreen","src_components_Chart","Timespan","date","Date","date2","sliderState","updateButtonState","componentDidUpdate","dateFunction","build_default","data-enable-time","dateFormat","onChange","updateFunction","Header","Dashboard","src_components_Header","src_components_Timespan","src_components_Card","Api","App","renderContent","src_components_Dashboard","components_Api","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.8a256e6e.chunk.js","sourcesContent":["import React, { Component } from 'react'\r\nimport { Line } from 'react-chartjs-2'\r\nimport './index.css'\r\n\r\nclass Chart extends Component {\r\n\r\n  state = {\r\n    pureData: [],\r\n    //använd denna att pusha in värden ifrån http\r\n    temperatureData: [],\r\n    //använd denna att pusha in värdet ifrån ws\r\n    currentSocketValue: null\r\n  }\r\n\r\n  componentDidMount = () => {\r\n    if (this.props.endPoint) {\r\n\r\n      let sock = new WebSocket(\"ws://159.65.94.112/ws/\" + this.props.endPoint);\r\n\r\n      sock.onmessage = (event) => {\r\n\r\n        let JSONParse = JSON.parse(event.data);\r\n\r\n        // if (JSONParse.value == this.state.currentSocketValue) {\r\n        //   console.log(\"Ingen förändring, \" + JSONParse.value + \" - \" + this.state.currentSocketValue)\r\n        // }\r\n        //\r\n        // if (JSONParse.value != this.state.currentSocketValue) {\r\n        //   console.log(\"FÖRÄNDRING!!!, \" + JSONParse.value + \" - \" + this.state.currentSocketValue)\r\n        // }\r\n\r\n        if (JSONParse.value !== undefined) {\r\n          this.setState({\r\n            currentSocketValue: [JSONParse.value]\r\n          })\r\n        }\r\n\r\n        const apiUrl = 'http://159.65.94.112/api/v1/batch/' + this.props.endPoint;\r\n        fetch(apiUrl)\r\n          .then(results => {\r\n            return results.json();\r\n          }).then((responseData) => {\r\n            const dataValues = responseData.map((endPoint) => {\r\n              return endPoint.value;\r\n            })\r\n\r\n            if (this.state.currentSocketValue !== null) {\r\n              console.log(\"socket: \" + this.state.currentSocketValue)\r\n              let testingTesting = dataValues.slice(this.props.amountOfData).concat(this.state.currentSocketValue)\r\n              this.setState({\r\n                pureData: testingTesting\r\n              })\r\n            }\r\n          });\r\n      }\r\n    }\r\n  }\r\n\r\n  render() {\r\n    this.data = (canvas) => {\r\n      const ctx = canvas.getContext(\"2d\");\r\n      const gradient = ctx.createLinearGradient(10, 10, 10, this.props.yAxisEndPoint);\r\n      gradient.addColorStop(0, 'rgba(167,202,245, 0.97)');\r\n      gradient.addColorStop(1, 'rgba(255, 255, 255, 0.23)');\r\n      return {\r\n        labels: this.state.pureData,\r\n        datasets: [\r\n          {\r\n            borderColor: \"#4C84FF\",\r\n            backgroundColor: gradient,\r\n            borderWidth: 2,\r\n            pointRadius: 0,\r\n            pointHoverRadius: 4.9,\r\n            pointBorderColor: \"#4C84FF\",\r\n            pointBorderWidth: 2,\r\n            pointBackgroundColor: \"#ffffff\",\r\n            data: this.state.pureData,\r\n          }\r\n        ]\r\n      }\r\n    };\r\n\r\n    return (\r\n      <div className=\"chart\">\r\n        {this.props.endPoint &&\r\n          <Line\r\n            data={this.data}\r\n            width={this.props.width}\r\n            height={this.props.height}\r\n            options={{\r\n              defaultFontSize: 30,\r\n              legend: {\r\n                display: false\r\n              },\r\n              scales: {\r\n                xAxes: [{\r\n                  gridLines: {\r\n                    color: '#F6F6F6'\r\n                  },\r\n                  ticks: {\r\n                    display: false\r\n                  }\r\n                }],\r\n                yAxes: [{\r\n                  gridLines: {\r\n                    color: '#F6F6F6'\r\n                  },\r\n                  ticks: {\r\n                    max: 49,\r\n                    min: 48\r\n                  }\r\n                }],\r\n              },\r\n            }}\r\n          />\r\n        }\r\n      </div>\r\n    )\r\n  }\r\n}\r\n\r\nexport default Chart\r\n","import React, { Component } from 'react'\r\nimport Chart from '../Chart'\r\nimport './index.css'\r\n\r\nclass Card extends Component {\r\n\r\n  state = {\r\n    fullScreenBool: false\r\n  }\r\n\r\n  fullScreen(e) {\r\n      this.setState({\r\n          fullScreenBool: e\r\n      })\r\n  }\r\n\r\n  render() {\r\n\r\n    // HÄR KOLLAR VI OM IKONEN FÖR HELSKÄRMSVYN\r\n    //BLIVIT KLICKAD PÅ ELLER EJ OCH RENDERAR OLIKA\r\n    //VYER BEROENDE PÅ DETTA\r\n    if (this.state.fullScreenBool === false) {\r\n      return (\r\n        <div className={this.props.type} style={{ gridColumnStart: this.props.colStart, gridColumnEnd: this.props.colEnd, gridRowStart: this.props.rowStart, gridRowEnd: this.props.rowEnd }}>\r\n          <div className=\"headline\">\r\n            <p>{this.props.title}</p>\r\n            <div className=\"open\">\r\n              <img src=\"/icons/fullscreen_icon.svg\" alt=\"ikon för fullskärm\" onClick={(e) => this.fullScreen(true)} />\r\n            </div>\r\n          </div>\r\n          <Chart width={80} height={33} amountOfData={-4} yAxisEndPoint={190} endPoint={this.props.endPoint} />\r\n        </div>\r\n      )\r\n    }\r\n\r\n    if (this.state.fullScreenBool === true) {\r\n      return (\r\n        <div className=\"fullScreen\">\r\n          <div className=\"graphSection\">\r\n            <div className=\"headline\">\r\n              <p>{this.props.title}</p>\r\n            </div>\r\n            <Chart width={100} height={57} amountOfData={-6} yAxisEndPoint={600} endPoint={this.props.endPoint} />\r\n          </div>\r\n          <div className=\"optionsSection\">\r\n            <div className=\"close\">\r\n              <img src=\"/icons/close.svg\" alt=\"ikon för att stänga fullskärm\" onClick={(e) => this.fullScreen(false)} />\r\n            </div>\r\n          </div>\r\n        </div>\r\n      )\r\n    }\r\n\r\n  }\r\n\r\n}\r\n\r\nexport default Card\r\n","import React, { Component } from 'react'\r\nimport Flatpickr from 'react-flatpickr'\r\nimport 'flatpickr/dist/themes/material_green.css'\r\nimport './index.css'\r\n\r\n\r\nclass Timespan extends Component {\r\n\r\n  state = {\r\n    date: new Date(),\r\n    date2: new Date(),\r\n    sliderState: 'today',\r\n    updateButtonState: ''\r\n  }\r\n\r\n  dateFunction(e) {\r\n    this.setState({\r\n      sliderState: e\r\n    })\r\n  }\r\n\r\n  //loggar det state som uppdaterades\r\n  componentDidUpdate = () => {\r\n    if (this.state.sliderState === 'today') {\r\n      console.log(\"today\");\r\n    }\r\n    else {\r\n      console.log(\"period\");\r\n    }\r\n  }\r\n\r\n  updateFunction(e) {\r\n    this.setState({\r\n      updateButtonState: e\r\n    })\r\n  }\r\n\r\n  render() {\r\n\r\n    const { date } = this.state;\r\n    const { date2 } = this.state;\r\n\r\n    return (\r\n      <div className=\"timelineContainer\">\r\n        <div className=\"timeline\">\r\n          <div className=\"chooseTime\">\r\n            <div className={\"option \" + (this.state.sliderState === 'today' ? 'active' : 'inactive')} onClick={(e) => this.dateFunction('today')}>\r\n              <p>Idag</p>\r\n            </div>\r\n            <div className={\"option \" + (this.state.sliderState === 'period' ? 'active' : 'inactive')} onClick={(e) => this.dateFunction('period')}>\r\n              <p>Välj period</p>\r\n            </div>\r\n          </div>\r\n          <div className=\"calendarContainer\">\r\n            <Flatpickr className={\"flatpickr \" + (this.state.sliderState === 'period' ? 'calendarOn' : 'calendarOff')}\r\n              data-enable-time value={date}\r\n              options={{ dateFormat: \"d M Y   H:i\" }}\r\n              onChange={date => { this.setState({ date }) }}\r\n            />\r\n            <img className={\"arrow \" + (this.state.sliderState === 'period' ? 'show' : '')} src=\"/icons/arrow_forward_timeline.svg\" alt=\"pil mellan tid-datumval\" />\r\n\r\n            <Flatpickr className={\"flatpickr \" + (this.state.sliderState === 'period' ? 'calendarOn' : 'calendarOff')}\r\n              data-enable-time value={date2}\r\n              options={{ dateFormat: \"d M Y    H:i\" }}\r\n              onChange={date2 => { this.setState({ date2 }) }}\r\n            />\r\n          </div>\r\n          <div className=\"updateContainer\">\r\n            <div className={\"update \" + (this.state.updateButtonState === 'update' ? 'show' : 'hide')} onClick={(e) => this.updateFunction('update')}>\r\n              <p>Uppdatera</p>\r\n            </div>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    )\r\n  }\r\n\r\n}\r\n\r\nexport default Timespan\r\n","import React, { Component } from 'react'\r\nimport './index.css'\r\n\r\nclass Header extends Component {\r\n    render() {\r\n        return (\r\n            <div className=\"headerBackground\">\r\n                <div className=\"headerContainer\">\r\n                    <div className=\"header\">\r\n                        <div className=\"heading\">\r\n                            <img className=\"headerLogo\" src=\"/icons/innovare_logo.png\" alt=\"Innovare logotyp\" />\r\n                            <div className=\"chooseCathegory\">\r\n                                <p>Välj kategori</p>\r\n                                <img className=\"arrowExpandIcon\" src=\"/icons/arrow_expand_menu.svg\" alt=\"ikon pil ner\" />\r\n                            </div>\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        )\r\n    }\r\n}\r\nexport default Header","import React, { Component } from 'react'\r\nimport Card from '../Card'\r\nimport Timespan from '../Timespan'\r\nimport Header from '../Header'\r\nimport './index.css'\r\n\r\nclass Dashboard extends Component {\r\n  render() {\r\n    return (\r\n      <div className=\"dashboardContainer\">\r\n        <Header />\r\n        <Timespan />\r\n        <Card type=\"smallCard\" title=\"Temperatur\" colStart=\"2\" colEnd=\"6\" endPoint=\"humidity\" />\r\n        <Card type=\"smallCard\" title=\"Luftfuktighet\" colStart=\"6\" colEnd=\"10\" />\r\n        <Card type=\"smallCard\" title=\"Damm\" colStart=\"10\" colEnd=\"14\" />\r\n        <Card type=\"bigCard\" title=\"Positionering på ridbanan\" colStart=\"2\" colEnd=\"10\" />\r\n        <Card type=\"smallCardUp\" title=\"Antal ryttare på ridbanan\" colStart=\"10\" colEnd=\"14\" />\r\n        <Card type=\"smallCardDown\" title=\"Sensorinfo\" colStart=\"10\" colEnd=\"14\" />\r\n      </div>\r\n    )\r\n  }\r\n}\r\nexport default Dashboard\r\n","import React, { Component } from 'react'\r\n// import './index.css'\r\nimport Header from '../Header'\r\n\r\nclass Api extends Component {\r\n  render() {\r\n    return (\r\n      <div className=\"dashboardContainer\">\r\n        <Header />\r\n      </div>\r\n    )\r\n  }\r\n}\r\nexport default Api\r\n","import React, { Component } from 'react'\r\nimport Dashboard from './components/Dashboard'\r\nimport Api from './components/Api'\r\nimport './App.css'\r\n\r\nclass App extends Component {\r\n\r\n    state = {\r\n        renderContent: 'Dashboard'\r\n    }\r\n\r\n    renderContent(e) {\r\n        this.setState({\r\n            renderContent: e\r\n        })\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div className=\"app\">\r\n                <div className=\"menu\">\r\n                    <div className=\"menuItems\">\r\n                        <div className={\"menuItem \" + (this.state.renderContent === 'Dashboard' ? 'active' : '')} onClick={(e) => this.renderContent('Dashboard')}>\r\n                            <div className=\"iconContainer\">\r\n                                <img alt={this.state.renderContent} src=\"/icons/dashboard.svg\"></img>\r\n                            </div>\r\n                            <p>Dashboard</p>\r\n                        </div>\r\n                        <div className={\"menuItem \" + (this.state.renderContent === 'Api' ? 'active' : '')} onClick={(e) => this.renderContent('Api')}>\r\n                            <div className=\"iconContainer\">\r\n                                <img alt={this.state.renderContent} src=\"/icons/api.svg\"></img>\r\n                            </div>\r\n                            <p>API</p>\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n                <div className=\"dashboardContainerFull\">\r\n                    {this.state.renderContent === 'Dashboard' && (<Dashboard />)}\r\n                    {this.state.renderContent === 'Api' && (<Api />)}\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read http://bit.ly/CRA-PWA.\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.1/8 is considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl)\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      if (\r\n        response.status === 404 ||\r\n        response.headers.get('content-type').indexOf('javascript') === -1\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(<App />, document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: http://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}